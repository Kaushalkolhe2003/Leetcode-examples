class Solution {
public:
    int solve(int i, int j, int m, int n,vector<vector<int>> &dp) {
        if (i == (m - 1) && j == (n - 1)) {
            return 1;
        }
        if (i >= m || j >= n) {
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
     
        int down = solve(i + 1, j, m, n,dp);
        int right = solve(i, j + 1, m, n,dp);
        
        dp[i][j]=down+right;
        
        return dp[i][j];
        
    }
    int Paths(int m,int n){
        int N=n+m-2;
        int r=m-1;
        double result=1;
        
        for(int i=1;i<=r;i++){
            result=result * (N-r+i)/i;
        }
        return (int)result;
    }
    
    int uniquePaths(int m, int n) {
//         vector<vector<int> >dp(m,vector<int>(n,-1));
        
//         return solve(0, 0, m, n,dp);
        
        //using combination we can find paths which are unique...
        return Paths(m,n);
    }
};
