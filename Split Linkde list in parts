/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int length = 0;
    ListNode* current = head;
    while (current) {
        length++;
        current = current->next;
    }

    // Step 2: Calculate the size of each part
    int part_size = length / k;
    int remainder = length % k;

    vector<ListNode*> result;
    current = head;

    // Step 3-5: Traverse the linked list and create k parts
    for (int i = 0; i < k; i++) {
        ListNode* part_head = current;
        int part_length = part_size + (i < remainder ? 1 : 0);

        // Traverse to the end of the current part
        for (int j = 0; j < part_length - 1; j++) {
            if (current) {
                current = current->next;
            }
        }

        // If there are nodes in the current part, add it to the result
        if (current) {
            ListNode* temp = current->next;
            current->next = nullptr;
            current = temp;
        }

        result.push_back(part_head);
    }

    return result;
    }
};
