/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    private:
     int getListLength(ListNode *head) {
        int length = 0;
        ListNode *current = head;
        while (current != NULL) {
            length++;
            current = current->next;
        }
        return length;
    }
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA == NULL || headB == NULL) {
            return NULL;
        }

        int lenA = getListLength(headA);
        int lenB = getListLength(headB);

        int diff = abs(lenA - lenB);

        ListNode *tempA = headA;
        ListNode *tempB = headB;

        if (lenA > lenB) {
            for (int i = 0; i < diff; ++i) {
                tempA = tempA->next;
            }
        } else {
            for (int i = 0; i < diff; ++i) {
                tempB = tempB->next;
            }
        }

        while (tempA != NULL && tempB != NULL) {
            if (tempA == tempB) {
                return tempA;
            }
            tempA = tempA->next;
            tempB = tempB->next;
        }

        return NULL;
    }

};
