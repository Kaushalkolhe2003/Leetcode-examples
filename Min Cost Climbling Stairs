class Solution {
public:
    int solve(vector<int> & cost,int n){
        if(n==0){
            return cost[0];
            
        }
        if(n==1){
            return cost[1];
        }
        
        int ans=cost[n]+ min(solve(cost,n-1),solve(cost,n-2));
        
        return ans;
    }
     int solve2(vector<int> &cost, int n, vector<int> &dp) {
        if (n == 0) {
            return cost[0];
        }
        if (n == 1) {
            return cost[1];
        }

        // Step 3: Check if value is already computed and stored in dp array
        if (dp[n] != -1) {
            return dp[n];
        }

        // Step 2: Calculate and store the value in dp array
        dp[n] = cost[n] + min(solve2(cost, n - 1, dp), solve2(cost, n - 2, dp));

        return dp[n];
    }
    int solve3(vector<int> &cost, int n) {
        //create a dp vector of n+1 size
        vector<int> dp(n+1);
        
        //initailize value of 0 and 1 to dp
        dp[0]=cost[0];
        dp[1]=cost[1];
        
        //for loop till n-1 
        for(int i=2;i<n;i++){
            dp[i]=cost[i]+ min(dp[i-1],dp[i-2]);
            
        }
        
        //return min of n-1 and n-2...
        return min(dp[n-1],dp[n-2]);
    }
    int solve4(vector<int> &cost, int n) {
       int prev2=cost[0];
        int prev1=cost[1];
        
        for(int i=2;i<n;i++){
            int curr=cost[i]+min(prev1,prev2);
            
            prev2=prev1;
            prev1=curr;
        }
        return min(prev1,prev2);
    }

    int minCostClimbingStairs(vector<int>& cost) {
//         int n = cost.size();

//         // Step 1: Initialize dp array with -1
//         vector<int> dp(n + 1, -1);  // Notice n+1 size

//         // Final step: Call solve2 for the last two steps
//         return min(solve2(cost, n - 1, dp), solve2(cost, n - 2, dp));
        
    // //for tablulation method....
    //     int n=cost.size();
    //     int ans=solve3(cost,n);
    //     return ans;
        
        
        int n=cost.size();
        int ans=solve4(cost,n);
        
        return ans;
        
        
    }
};
